/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Conexion.Conexion;
import Modelo.Paciente;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JTable;
import Controlador.Ctlr_Paciente;
import java.awt.Toolkit;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import Modelo.Internar;

/**
 *
 * @author ASUS
 */
public class verPacientes extends javax.swing.JFrame {

    private String nombreSeleccionado;
    private String motivoSeleccionado;
    private InternarPacientes internarFrame;
   
    /**
     * Creates new form Consultar
     */
    private int paginaActual = 1;
    private final int registrosPorPagina = 20;

    public verPacientes() {
        initComponents();
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        this.setSize(screenSize.width, screenSize.height);
        this.internarFrame = internarFrame;
        this.CargarTablaPacientes(registrosPorPagina, paginaActual);
    }
    
    
    public void setInternarFrame(InternarPacientes internarFrame) {
        this.internarFrame = internarFrame;
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCriterio = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPaciente = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnInternar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel2.setFont(new java.awt.Font("Rockwell Condensed", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pacientes registrados");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Buscar Paciente");

        txtCriterio.setBackground(new java.awt.Color(204, 255, 255));
        txtCriterio.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtCriterio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCriterioKeyReleased(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(0, 51, 102));
        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/flecha-izquierda.png"))); // NOI18N
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        tblPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPaciente);

        jButton2.setBackground(new java.awt.Color(0, 51, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Registrar nuevo paciente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(0, 51, 102));
        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 51, 102));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setText("Siguiente");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnInternar.setBackground(new java.awt.Color(0, 51, 102));
        btnInternar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnInternar.setForeground(new java.awt.Color(255, 255, 255));
        btnInternar.setText("Internar");
        btnInternar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInternarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(txtCriterio, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(btnActualizar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addComponent(btnInternar)
                .addGap(38, 38, 38)
                .addComponent(btnRegresar)
                .addGap(35, 35, 35))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(638, 638, 638)
                        .addComponent(btnAnterior)
                        .addGap(86, 86, 86)
                        .addComponent(btnSiguiente))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(488, 488, 488)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(186, 587, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCriterio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar))
                        .addComponent(btnRegresar))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar)
                        .addComponent(btnActualizar)
                        .addComponent(jButton2)
                        .addComponent(btnInternar)))
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnterior)
                    .addComponent(btnSiguiente))
                .addGap(115, 115, 115))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        Menu m = new Menu();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        RegistroPDoctor rp = new RegistroPDoctor();
        rp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        String criterio = txtCriterio.getText().trim();
        buscarPaciente(criterio);
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtCriterioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCriterioKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCriterioKeyReleased

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = verPacientes.tblPaciente.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un paciente para actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas actualizar los datos de este paciente?", "Confirmar Actualización", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            Paciente paciente = new Paciente();
            paciente.setNombre(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 0).toString());
            paciente.setApellidoP(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 1).toString());
            paciente.setApellidoM(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 2).toString());
            paciente.setFechaNacimiento(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 3).toString());
            paciente.setSexo(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 4).toString());
            paciente.setDireccion(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 5).toString());
            paciente.setCURP(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 6).toString());
            paciente.setRFC(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 7).toString());
            paciente.setTelefono(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 8).toString());
            paciente.setMotivo(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 9).toString());
            paciente.setModoLlegada(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 10).toString());
            paciente.setFechaIngreso(verPacientes.tblPaciente.getValueAt(filaSeleccionada, 11).toString());

            Ctlr_Paciente controlPaciente = new Ctlr_Paciente();
            if (controlPaciente.actualizarPaciente(paciente)) {
                JOptionPane.showMessageDialog(this, "Datos del paciente actualizados correctamente.");
                CargarTablaPacientes(registrosPorPagina, paginaActual);
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar los datos del paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = verPacientes.tblPaciente.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un paciente para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este paciente?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            String rfc = verPacientes.tblPaciente.getValueAt(filaSeleccionada, 7).toString();

            Ctlr_Paciente controlPaciente = new Ctlr_Paciente();
            if (controlPaciente.eliminarPaciente(rfc)) {
                JOptionPane.showMessageDialog(this, "Paciente eliminado correctamente.");
                CargarTablaPacientes(registrosPorPagina, paginaActual);
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        if (paginaActual > 1) {
            paginaActual--;
            CargarTablaPacientes(registrosPorPagina, paginaActual);
        }
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        paginaActual++;
        CargarTablaPacientes(registrosPorPagina, paginaActual);
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnInternarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInternarActionPerformed
     int selectedRow = tblPaciente.getSelectedRow();

    if (selectedRow != -1) {
        String nombre = tblPaciente.getValueAt(selectedRow, 0).toString();
        String apellidoP = tblPaciente.getValueAt(selectedRow, 1).toString();
        String apellidoM = tblPaciente.getValueAt(selectedRow, 2).toString();
        String rfc = tblPaciente.getValueAt(selectedRow, 7).toString();
        String nombreCompleto = nombre + " " + apellidoP + " " + apellidoM;

        if (internarFrame == null) {
            internarFrame = new InternarPacientes();
        }

        internarFrame.setPacienteInfo(nombreCompleto, rfc);
        this.setVisible(false);
        internarFrame.setVisible(true);
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona el paciente a internar.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnInternarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(verPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(verPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(verPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(verPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new verPacientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInternar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tblPaciente;
    private javax.swing.JTextField txtCriterio;
    // End of variables declaration//GEN-END:variables

    /*
    M+etodo para mostrar a los pacientes.
     */
    private void CargarTablaPacientes(int registrosPorPagina1, int paginaActual1) {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        int inicio = (paginaActual - 1) * registrosPorPagina;

        String sql = "SELECT nombre, apellido_paterno, apellido_materno, fecha_nacimiento, sexo, direccion, curp, rfc, telefono, motivo, modo_llegada, fecha_ingreso "
                + "FROM pacientes LIMIT ? OFFSET ?";

        PreparedStatement ps;

        try {
            ps = con.prepareStatement(sql);
            ps.setInt(1, registrosPorPagina);
            ps.setInt(2, inicio);
            ResultSet rs = ps.executeQuery();

            model.setColumnIdentifiers(new String[]{
                "Nombre", "Apellido Paterno", "Apellido Materno", "Fecha de Nacimiento", "Sexo", "Dirección", "CURP", "RFC", "Telefono", "Motivo", "Modo de llegada", "Fecha de Ingreso"
            });

            while (rs.next()) {
                Object[] fila = new Object[12];
                for (int i = 0; i < 12; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }

            while (model.getRowCount() < registrosPorPagina) {
                Object[] filaVacia = new Object[12];
                model.addRow(filaVacia);
            }

            tblPaciente.setModel(model);
            ajustarTamanioColumnas();
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al rellenar la tabla Pacientes: " + e);
        }
    }

    private void ajustarTamanioColumnas() {
        TableColumn columnSexo = verPacientes.tblPaciente.getColumnModel().getColumn(4);
        columnSexo.setPreferredWidth(10);
        TableColumn columnCurp = verPacientes.tblPaciente.getColumnModel().getColumn(6);
        columnCurp.setPreferredWidth(100);
        TableColumn columnTel = verPacientes.tblPaciente.getColumnModel().getColumn(8);
        columnTel.setPreferredWidth(20);
        TableColumn columnMotivo = verPacientes.tblPaciente.getColumnModel().getColumn(9);
        columnMotivo.setPreferredWidth(100);
    }

    private void buscarPaciente(String criterio) {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        int inicio = (paginaActual - 1) * registrosPorPagina;

        String sql = "SELECT nombre, apellido_paterno, apellido_materno, fecha_nacimiento, sexo, direccion, curp, rfc, telefono, motivo, modo_llegada, fecha_ingreso "
                + "FROM pacientes WHERE nombre LIKE ? OR rfc LIKE ? LIMIT ? OFFSET ?";

        PreparedStatement ps;

        try {
            ps = con.prepareStatement(sql);
            ps.setString(1, "%" + criterio + "%");
            ps.setString(2, "%" + criterio + "%");
            ps.setInt(3, registrosPorPagina);
            ps.setInt(4, inicio);
            ResultSet rs = ps.executeQuery();

            model.setColumnIdentifiers(new String[]{
                "Nombre", "Apellido Paterno", "Apellido Materno", "Fecha de Nacimiento", "Sexo", "Dirección", "CURP", "RFC", "Telefono", "Motivo", "Modo de llegada", "Fecha de Ingreso"
            });

            while (rs.next()) {
                Object[] fila = new Object[12];
                for (int i = 0; i < 12; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }

            tblPaciente.setModel(model);
            ajustarTamanioColumnas();
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar paciente: " + e);
        }
    }

    private void seleccionarPaciente() {
        int filaSeleccionada = tblPaciente.getSelectedRow();
        if (filaSeleccionada != -1) {
            nombreSeleccionado = (String) tblPaciente.getValueAt(filaSeleccionada, 0);
            motivoSeleccionado = (String) tblPaciente.getValueAt(filaSeleccionada, 9);

            Internar ventanaInternar = new Internar();

            ventanaInternar.setNombre(nombreSeleccionado);
            ventanaInternar.setMotivo(motivoSeleccionado);
            Vista.InternarPacientes in = new Vista.InternarPacientes();
            in.setVisible(true);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un paciente.");
        }
    }

}
